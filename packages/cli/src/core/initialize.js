const fs = require("fs");
const path = require("path");
const inquirer = require("inquirer");
const Generate = require("../cli/generate");
const {Logger, Locale} = require("@restqa/core-logger");
const {getPackageJson} = require("../utils/fs");
const Telemetry = require("../utils/telemetry");
const Config = require("../config");
const Microservice = require("@restqa/core-microservice");
const {Ignore} = require("@restqa/core-git");
const CustomStep = require("../services/custom-step-definition");

const DEFAULT_ANSWER = {
  name: "app",
  port: 8000,
  description: "Configuration generated by restqa init",
  telemetry: true
};

const DEFAULT_TEST_FOLDER = "tests";

const locale = Locale("service.init");

async function initialize(program = {}) {
  const {folder} = program;

  const questionName = {
    type: "input",
    name: "name",
    default: DEFAULT_ANSWER.name,
    message: locale.questions.name
  };

  const questionPort = {
    type: "input",
    name: "port",
    message: locale.questions.port,
    default: DEFAULT_ANSWER.port
  };

  const questionCommand = {
    type: "input",
    name: "command",
    message: locale.questions.command
  };

  const questionTelemetry = {
    type: "confirm",
    name: "telemetry",
    message: locale.questions.telemetry,
    default: DEFAULT_ANSWER.telemetry
  };

  const questions = [
    questionName,
    questionPort,
    questionCommand,
    questionTelemetry
  ];

  const packageJson = getPackageJson(folder);
  if (packageJson) {
    questions.shift();
    const availablesCommands = Object.keys(packageJson.scripts);
    questionCommand.type = "list";
    questionCommand.choices = availablesCommands
      .filter((cmd) => {
        return ["test", "happy"].includes(cmd) === false;
      })
      .map((cmd) => {
        if (cmd !== "start") {
          cmd = `run ${cmd}`;
        }
        return {
          name: `npm ${cmd}`,
          value: `npm ${cmd}`
        };
      });
  }

  const answers = await inquirer.prompt(questions);
  answers.folder = folder;

  if (packageJson) {
    if (packageJson.name && !answers.name) {
      answers.name = packageJson.name;
    }

    if (packageJson.description && !answers.description) {
      answers.description = packageJson.description;
    }
  }

  return initialize.generate(answers);
}

initialize.generate = async function (options) {
  options.folder = options.folder || process.cwd();
  options.testFolder = options.testFolder || DEFAULT_TEST_FOLDER;

  const {name, description, port, command, folder, telemetry, testFolder} =
    options;

  if (!name) {
    throw new ReferenceError("Please share a project name.");
  }

  if (!port) {
    throw new ReferenceError("Please share a project port.");
  }

  if (!command) {
    throw new ReferenceError(
      "Please share the dev command to run the microservice."
    );
  }

  const _telemetry = new Telemetry();
  _telemetry.toggle(telemetry);

  const config = new Config();
  config.setName(name);
  config.setDescription(description);
  config.getLocalTest().setPort(port);
  config.getLocalTest().setCommand(command);

  const filename = path.resolve(folder, ".restqa.yml");
  config.save(filename);

  Logger.success("service.init.success.welcome");

  const opt = {
    port: config.getLocalTest().getPort(),
    command: config.getLocalTest().getCommand()
  };
  const microservice = new Microservice(opt);

  const localURL = `http://localhost:${opt.port}/`;
  try {
    await microservice.start();

    const curl = ["curl", localURL];

    const response = await Generate({print: false}, {args: curl});

    const output = `${testFolder}/local/get.feature`;

    createRecursiveFolder(output, folder);

    const content = [
      "Feature: GET /",
      "",
      "Scenario: Initial API (generated)",
      response
    ];

    fs.writeFileSync(path.resolve(folder, output), content.join("\n"));

    CustomStep.createTemplate(path.resolve(folder, testFolder));

    const ignoreFiles = [
      "restqa",
      `${testFolder}/mocks`,
      `${testFolder}/collections`,
      `${testFolder}/integrations`,
      `${testFolder}/performances`
    ];
    Ignore({
      files: ignoreFiles,
      folder
    });

    Logger.info("service.init.success.sample");
  } catch (err) {
    Logger.log("service.init.error.scenario_generation", localURL);
  }
  microservice.stop();
  Logger.log("service.init.success.info");
  return config;
};

function createRecursiveFolder(filename, root) {
  fs.mkdirSync(path.resolve(root, path.dirname(filename)), {recursive: true});
}

module.exports = initialize;
