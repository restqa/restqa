const Plugin = require("@restqa/plugin");

const jestqa = new JestQA(__filename, true);

beforeEach(jestqa.beforeEach);
afterEach(jestqa.afterEach);

describe("#bootstrap", () => {
  test("Throw error if the processor is undefined", () => {
    const Bootstrap = require("./bootstrap");
    expect(() => {
      Bootstrap();
    }).toThrow(
      new Error(
        "Please provide a processor containing the methods: After, AfterAll, Before, BeforeAll, Given, When, Then, defineParameterType, setWorldConstructor and setDefaultTimeout."
      )
    );
  });

  test("Throw error if the processor doesn't contain an required method", () => {
    const Bootstrap = require("./bootstrap");
    expect(() => {
      Bootstrap({
        After: jest.fn()
      });
    }).toThrow(
      new Error(
        "Please provide a processor containing the methods: After, AfterAll, Before, BeforeAll, Given, When, Then, defineParameterType, setWorldConstructor and setDefaultTimeout."
      )
    );

    expect(() => {
      Bootstrap({
        After: jest.fn(),
        AfterAll: jest.fn(),
        Before: jest.fn(),
        BeforeAll: jest.fn(),
        Given: jest.fn(),
        When: jest.fn(),
        Then: jest.fn(),
        defineParameterType: jest.fn()
      });
    }).toThrow(
      new Error(
        "Please provide a processor containing the methods: After, AfterAll, Before, BeforeAll, Given, When, Then, defineParameterType, setWorldConstructor and setDefaultTimeout."
      )
    );
  });

  test("Throw error if the config can't be loaded", () => {
    const Bootstrap = require("./bootstrap");
    expect(() => {
      Bootstrap({
        After: jest.fn(),
        AfterAll: jest.fn(),
        Before: jest.fn(),
        BeforeAll: jest.fn(),
        Given: jest.fn(),
        When: jest.fn(),
        Then: jest.fn(),
        defineParameterType: jest.fn(),
        setWorldConstructor: jest.fn(),
        setDefaultTimeout: jest.fn()
      });
    }).toThrow(
      new Error('The configuration file locate at "undefined" doesn\'t exist.')
    );
  });

  test("Load plugin @restqa/restqapi then run setup the processor", () => {
    const content = `
---
version: 0.0.1
metadata:
  code: APP
  name: app
  description: Configuration generated by restqa init
tests:
  unit:
    port: 8088
    command: npm run dev
    data:
      storage: "./test/data"
      channel: google-sheet
      config: 
        id: test
        apikey: testapi
      variables:
        hello: world

`;
    const filename = jestqa.createCwdConfig(content);

    const mockPlugin = new Plugin("restqapi");
    mockPlugin.addGivenStep("my step", () => {}, "my description", "example");
    mockPlugin.addState("host", "https://example.com");
    jest.mock("@restqa/restqapi", () => mockPlugin);

    const processor = {
      After: jest.fn(),
      AfterAll: jest.fn(),
      Before: jest.fn(),
      BeforeAll: jest.fn(),
      Given: jest.fn(),
      When: jest.fn(),
      Then: jest.fn(),
      defineParameterType: jest.fn(),
      setWorldConstructor: jest.fn(),
      setDefaultTimeout: jest.fn()
    };
    const options = {
      configFile: filename
    };

    const Bootstrap = require("./bootstrap");

    Bootstrap(processor, options);

    expect(mockPlugin._getConfig()).toEqual({
      url: "http://localhost:8088"
    });

    expect(processor.Given).toHaveBeenCalledTimes(1);
    expect(processor.Given).toHaveBeenCalledWith(
      "my step",
      expect.any(Function),
      "my description",
      ["restqapi", "example"]
    );

    expect(processor.defineParameterType).toHaveBeenCalledTimes(1);

    expect(processor.setWorldConstructor).toHaveBeenCalledTimes(1);
    const World = processor.setWorldConstructor.mock.calls[0][0];
    const world = new World({});
    expect(world.state.host).toBe("https://example.com");
    expect(world.data.get("{{ hello }}")).toBe("world");
    expect(world.getConfig("restqapi")).toEqual({
      url: "http://localhost:8088"
    });

    const {regexp, transformer, name} =
      processor.defineParameterType.mock.calls[0][0];
    expect(regexp).toEqual(/\{\{(.*)\}\}/);
    expect(name).toEqual("data");
    expect(transformer.call(world, "hello")).toEqual("world");

    expect(jestqa.getLoggerMock()).toHaveBeenCalledTimes(1);
    expect(jestqa.getLoggerMock().mock.calls[0][0]).toMatch(
      'ðŸŽ¯ The selected environment is: "local"'
    );
  });

  test("Load plugin @restqa/restqapi then run setup the processor (integration tests)", () => {
    const content = `
---
version: 0.0.1
metadata:
  code: APP
  name: app
  description: Configuration generated by restqa init
tests:
  integrations:
  - name: UAT 
    url: https://uat.example.com
    data:
      storage: "./test/data"
      channel: google-sheet
      config: 
        id: test
        apikey: testapi
      variables:
        hello: world

`;
    const filename = jestqa.createCwdConfig(content);

    const mockPlugin = new Plugin("restqapi");
    mockPlugin.addGivenStep("my step", () => {}, "my description", "example");
    jest.mock("@restqa/restqapi", () => mockPlugin);

    const processor = {
      After: jest.fn(),
      AfterAll: jest.fn(),
      Before: jest.fn(),
      BeforeAll: jest.fn(),
      Given: jest.fn(),
      When: jest.fn(),
      Then: jest.fn(),
      defineParameterType: jest.fn(),
      setWorldConstructor: jest.fn(),
      setDefaultTimeout: jest.fn()
    };
    const options = {
      configFile: filename,
      env: "uat"
    };

    const Bootstrap = require("./bootstrap");

    Bootstrap(processor, options);

    expect(mockPlugin._getConfig()).toEqual({
      url: "https://uat.example.com"
    });

    expect(processor.Given).toHaveBeenCalledTimes(1);
    expect(processor.Given).toHaveBeenCalledWith(
      "my step",
      expect.any(Function),
      "my description",
      ["restqapi", "example"]
    );

    expect(processor.defineParameterType).toHaveBeenCalledTimes(1);

    expect(processor.setWorldConstructor).toHaveBeenCalledTimes(1);
    const World = processor.setWorldConstructor.mock.calls[0][0];
    const world = new World({});
    expect(world.data.get("{{ hello }}")).toBe("world");
    expect(world.getConfig("restqapi")).toEqual({
      url: "https://uat.example.com"
    });

    const {regexp, transformer, name} =
      processor.defineParameterType.mock.calls[0][0];
    expect(regexp).toEqual(/\{\{(.*)\}\}/);
    expect(name).toEqual("data");
    expect(transformer.call(world, "hello")).toEqual("world");

    expect(jestqa.getLoggerMock()).toHaveBeenCalledTimes(1);
    expect(jestqa.getLoggerMock().mock.calls[0][0]).toMatch(
      'ðŸŽ¯ The selected environment is: "UAT"'
    );
  });

  test("Load plugin restqapi and restqkube then run setup the processor (+ setup the timeout)", () => {
    const content = `
---
version: 0.0.1
metadata:
  code: APP
  name: app
  description: Configuration generated by restqa init
tests:
  integrations:
  - name: local
    url: https://api.restqa.io
    data:
      startSymbol: '[['
      endSymbol: ']]'
      variables:
        foo: bar
    outputs:
      - type: html
        enabled: true
plugins:
  - name: restqkube
    config:
      kube:
        config: ./kubeconfig
settings:
  timeout: 10000
    `;
    const filename = jestqa.createTmpFile(content, ".restqa-example.yml");

    const mockPlugins = [
      new Plugin("restqapi")
        .addGivenStep("my given step", () => {})
        .addState("host", "https://example.com"),
      new Plugin("restqkube")
        .addThenStep("my then step", () => {})
        .addState("cluster", "example.cluster.local")
    ];

    jest.mock("@restqa/restqapi", () => mockPlugins[0]);

    jest.mock("module", () => {
      return {
        createRequire: () => {
          return function (config) {
            return mockPlugins[1];
          };
        }
      };
    });

    const processor = {
      After: jest.fn(),
      AfterAll: jest.fn(),
      Before: jest.fn(),
      BeforeAll: jest.fn(),
      Given: jest.fn(),
      When: jest.fn(),
      Then: jest.fn(),
      defineParameterType: jest.fn(),
      setWorldConstructor: jest.fn(),
      setDefaultTimeout: jest.fn()
    };

    const options = {
      configFile: filename,
      env: "local"
    };

    const Bootstrap = require("./bootstrap");

    Bootstrap(processor, options);

    expect(processor.Before).toHaveBeenCalledTimes(2);

    expect(processor.Before).toHaveBeenCalledWith(expect.any(Function));
    expect(processor.Before).toHaveBeenLastCalledWith(
      {tags: "@skip or @wip"},
      expect.any(Function)
    );

    expect(mockPlugins[0]._getConfig()).toEqual({
      url: "https://api.restqa.io"
    });

    expect(processor.Given).toHaveBeenCalledTimes(1);
    expect(processor.Given).toHaveBeenCalledWith(
      "my given step",
      expect.any(Function),
      undefined,
      ["restqapi"]
    );

    expect(mockPlugins[1]._getConfig()).toEqual({
      kube: {
        config: "./kubeconfig"
      }
    });

    expect(processor.Then).toHaveBeenCalledTimes(1);
    expect(processor.Then).toHaveBeenCalledWith(
      "my then step",
      expect.any(Function),
      undefined,
      ["restqkube"]
    );

    expect(processor.setDefaultTimeout).toHaveBeenCalledTimes(1);
    expect(processor.setDefaultTimeout).toHaveBeenCalledWith(10000);

    expect(processor.setWorldConstructor).toHaveBeenCalledTimes(1);
    const World = processor.setWorldConstructor.mock.calls[0][0];
    const world = new World({});
    expect(world.state.host).toBe("https://example.com");
    expect(world.data.get("[[ foo ]]")).toBe("bar");

    expect(processor.defineParameterType).toHaveBeenCalledTimes(1);
    const {regexp, transformer, name} =
      processor.defineParameterType.mock.calls[0][0];
    expect(regexp).toEqual(/\[\[(.*)\]\]/);
    expect(name).toEqual("data");
    expect(transformer.call(world, "foo")).toEqual("bar");

    expect(jestqa.getLoggerMock()).toHaveBeenCalledTimes(1);
    expect(jestqa.getLoggerMock().mock.calls[0][0]).toMatch(
      'ðŸŽ¯ The selected environment is: "local"'
    );
  });

  test("Throw error if we want to run an integration test but the integration config is missing", () => {
    const content = `
---
version: 0.0.1
metadata:
  code: APP
  name: app
  description: Configuration generated by restqa init
tests:
  unit:
    port: 8080
    command: npm run dev
    `;
    const filename = jestqa.createCwdConfig(content);

    const processor = {
      After: jest.fn(),
      AfterAll: jest.fn(),
      Before: jest.fn(),
      BeforeAll: jest.fn(),
      Given: jest.fn(),
      When: jest.fn(),
      Then: jest.fn(),
      defineParameterType: jest.fn(),
      setWorldConstructor: jest.fn(),
      setDefaultTimeout: jest.fn()
    };

    const options = {
      configFile: filename,
      env: "uat"
    };

    const Bootstrap = require("./bootstrap");

    expect(() => {
      Bootstrap(processor, options);
    }).toThrow(
      new Error(
        "The integration test can't be executed due to missing integration test configuration"
      )
    );
  });

  test("Throw error if we want to run an unt test but the unit config is missing", () => {
    const content = `
---
version: 0.0.1
metadata:
  code: APP
  name: app
  description: Configuration generated by restqa init
tests:
  integrations:
    - name: UAT
      url: https://uat.example.com
    `;
    const filename = jestqa.createCwdConfig(content);

    const processor = {
      After: jest.fn(),
      AfterAll: jest.fn(),
      Before: jest.fn(),
      BeforeAll: jest.fn(),
      Given: jest.fn(),
      When: jest.fn(),
      Then: jest.fn(),
      defineParameterType: jest.fn(),
      setWorldConstructor: jest.fn(),
      setDefaultTimeout: jest.fn()
    };

    const options = {
      configFile: filename
    };

    const Bootstrap = require("./bootstrap");

    expect(() => {
      Bootstrap(processor, options);
    }).toThrow(
      new Error(
        "The unit test can't be executed due to missing unit test configuration"
      )
    );
  });
});
