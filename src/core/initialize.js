const fs = require("fs");
const path = require("path");
const inquirer = require("inquirer");
const Generate = require("../cli/generate");
const logger = require("../utils/logger");
const {getPackageJson} = require("../utils/fs");
const Telemetry = require("../utils/telemetry");
const Locale = require("../locales")();
const Config = require("../config");
const Executor = require("./executor");

const DEFAULT_ANSWER = {
  name: "app",
  port: 8000,
  description: "Configuration generated by restqa init",
  telemetry: true
};

async function initialize(program = {}) {
  const {folder} = program;


  const questionName = {
    type: "input",
    name: "name",
    default: DEFAULT_ANSWER.name,
    message: Locale.get("service.init.questions.name")
  };

  const questionPort = {
    type: "input",
    name: "port",
    message: Locale.get("service.init.questions.port"),
    default: DEFAULT_ANSWER.port
  };

  const questionCommand = {
    type: "input",
    name: "command",
    message: Locale.get("service.init.questions.command")
  };

  const questionTelemetry = {
    type: "confirm",
    name: "telemetry",
    message: Locale.get("service.init.questions.telemetry"),
    default: DEFAULT_ANSWER.telemetry
  };

  const questions = [
    questionName,
    questionPort,
    questionCommand,
    questionTelemetry
  ];

  const packageJson = getPackageJson(folder);
  if (packageJson) {
    questions.shift();
    const availablesCommands = Object.keys(packageJson.scripts);
    questionCommand.type = "list";
    questionCommand.choices = availablesCommands
      .filter((cmd) => {
        return cmd !== "test";
      })
      .map((cmd) => {
        if (cmd !== "start") {
          cmd = `run ${cmd}`;
        }
        return {
          name: `npm ${cmd}`,
          value: `npm ${cmd}`
        };
      });
  }

  const answers = await inquirer.prompt(questions);
  answers.folder = folder;

  if (packageJson) {
    if (packageJson.name && !answers.name) {
      answers.name = packageJson.name;
    }

    if (packageJson.description && !answers.description) {
      answers.description = packageJson.description;
    }
  }

  return initialize.generate(answers);
}

initialize.generate = async function (options) {
  options.folder = options.folder || process.cwd();

  const {name, description, port, command, folder, telemetry} = options;

  if (!name) {
    throw new ReferenceError("Please share a project name.");
  }

  if (!port) {
    throw new ReferenceError("Please share a project port.");
  }

  if (!command) {
    throw new ReferenceError(
      "Please share the dev command to run the microservice."
    );
  }

  const _telemetry = new Telemetry();
  _telemetry.toggle(telemetry);

  const config = new Config();
  config.setName(name);
  config.setDescription(description);
  config.getUnitTest().setPort(port);
  config.getUnitTest().setCommand(command);

  const filename = path.resolve(folder, ".restqa.yml");
  config.save(filename);

  logger.success("service.init.success.welcome");

  const opt = {
    port: config.getUnitTest().getPort(),
    command: config.getUnitTest().getCommand()
  };
  const microservice = new Executor(opt);

  const localURL = `http://localhost:${opt.port}/`;
  try {
    await microservice.execute();

    const curl = ["curl", localURL];

    const response = await Generate({print: false}, {args: curl});

    const output = "tests/integration/welcome-restqa.feature";

    createRecursiveFolder(output, folder);

    const content = [
      "Feature: Welcome to the RestQA community",
      "",
      "Scenario: Get the list of useful RestQA resources",
      response
    ];

    fs.writeFileSync(path.resolve(folder, output), content.join("\n"));

    logger.info("service.init.success.sample");
  } catch (err) {
    logger.log("service.init.error.scenario_generation", localURL);
  }
  microservice.terminate();
  logger.log("service.init.success.info");
  return config;
};

function createRecursiveFolder(filename, root) {
  fs.mkdirSync(path.resolve(root, path.dirname(filename)), {recursive: true});
}

module.exports = initialize;
